<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://scaramouche.me</id>
    <title>Scaramouche</title>
    <updated>2022-11-18T16:09:14.335Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://scaramouche.me"/>
    <link rel="self" href="https://scaramouche.me/atom.xml"/>
    <subtitle>&lt;div align=center&gt;Algorithms Solutions and Guide-Books&lt;/div&gt;</subtitle>
    <logo>https://scaramouche.me/images/avatar.png</logo>
    <icon>https://scaramouche.me/favicon.ico</icon>
    <rights>All rights reserved 2022, Scaramouche</rights>
    <entry>
        <title type="html"><![CDATA[【前缀和】找到最高海拔]]></title>
        <id>https://scaramouche.me/qian-zhui-he-zhao-dao-zui-gao-hai-ba/</id>
        <link href="https://scaramouche.me/qian-zhui-he-zhao-dao-zui-gao-hai-ba/">
        </link>
        <updated>2022-11-18T16:05:07.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p><em>写在前面：</em></p>
<p><em>很多新手，例如我，特别喜欢简单题，经常花5min打卡了事。但是这样真的能够给自己带来能力上的提升吗？</em></p>
<p><em>即使是简单题，我也希望大家能够沉下心来，分析数据结构和算法，打好中等题和困难题的基础。</em></p>
<hr>
<h2 id="解题思路">解题思路</h2>
<p>整数数组 <code>gain</code> 表示<strong>下一个点的高度减去这个点的高度</strong>。</p>
<p>如果用 <code>altitudes</code>表示所有点的高度的话，并且约定初始点高度为0的话，那么可以得出以下公式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>t</mi><mi>t</mi><mi>i</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>s</mi><mo>[</mo><mi>x</mi><mo>]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>if</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>g</mi><mi>a</mi><mi>i</mi><mi>n</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>if</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>n</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">attitudes[x]=\begin{cases}0 &amp; \text{if} &amp; x=0 
\\\sum_{i=0}^{x-1} gain[i] &amp; \text{if} &amp; 0&lt;x&lt;n
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>我们从左到右遍历数组，计算每个点的高度，然后取最大值即可。</p>
<h3 id="解法一-前缀和">解法一: 前缀和</h3>
<pre><code class="language-py">class Solution:
    def largestAltitude(self, gain: List[int]) -&gt; int:
        altitudes=[0]

        for i in range(len(gain)):
            altitudes.append(altitudes[-1]+gain[i])

        return max(altitudes)
</code></pre>
<h2 id="不止解题">不止解题</h2>
<p>本题属于前缀和类型的模板题：在题目中给出了前缀和的定义，只要按照定义实现即可。</p>
<p>我们把这道题要求的数据抽象出来，如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mn>0</mn></msubsup><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mn>1</mn></msubsup><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
\sum_{i=0}^{0}nums[i]    &amp; \sum_{i=0}^{1}nums[i]  &amp;...   &amp;\sum_{i=0}^{n-1}nums[i] 
\end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.314008em;vertical-align:-0.407004em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9070040000000001em;"><span style="top:-2.9529959999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.407004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9070040000000001em;"><span style="top:-2.9529959999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.407004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9070040000000001em;"><span style="top:-2.9529959999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.407004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9070040000000001em;"><span style="top:-2.9529959999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.407004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p>
<p>可以看到，我们<strong>多次想要计算</strong>数组 <code>nums</code>从 <code>0</code>到 <code>x</code>的和。这就叫做<strong>前缀和</strong>。</p>
<p>到这里为止，你可以解决的题有：</p>
<ol>
<li><strong>[easy]</strong><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">区域和检索 - 数组不可变</a><br>
<em>面向对象程序设计</em></li>
<li><strong>[mid]</strong><a href="https://leetcode.cn/problems/subarray-sum-equals-k/">和为 K 的子数组</a><br>
<em>前缀和与一种简单算法结合，能够快速查找某个符合条件的区间是否存在</em></li>
<li><strong>[mid]</strong><a href="https://leetcode.cn/problems/count-number-of-nice-subarrays/">统计「优美子数组」</a><br>
<em>前缀<s>和</s>数字(?)奇怪的名字，但是一样的思路</em></li>
</ol>
<p>如果你对单调栈非常熟悉，也可以尝试下面这几道题。其中第一和第二道为单调栈题目，第三道为基于前两道题目基础的前缀和算法题目。</p>
<ol>
<li><strong>[mid]</strong><a href="https://leetcode.cn/problems/sum-of-subarray-minimums/">子数组的最小值之和</a><br>
-&gt;<strong>[mid]</strong><a href="https://leetcode.cn/problems/maximum-subarray-min-product/">子数组最小乘积的最大值</a><br>
-&gt;<strong>[hard]</strong><a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/">巫师的总力量和</a><br>
<em>第三道题目难度分2621，量力而行</em></li>
</ol>
<p>如果你想更进一步，可以尝试学习下面的算法，这些算法都是用来解决区间问题。<em>原文见链接</em></p>
<blockquote>
<p><a href="https://leetcode.cn/problems/count-of-range-sum/solution/xian-ren-zhi-lu-ru-he-xue-xi-ke-yi-jie-jue-ben-ti-/">如何学习可以解决本题的算法与数据结构</a> @zerotrac</p>
</blockquote>
<h5 id="频数数组">频数数组</h5>
<blockquote>
<p>令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>r</mi><mi>e</mi><mi>q</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">freq[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>表示元素<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>在数据结构中的出现次数。</p>
<p>操作1「查询」：给定一个范围 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo separator="true">,</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[left,right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span>，查询 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>[</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">t[left]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>[</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">t[right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span> 的和；</p>
<p>操作2「更新」：给定一个元素 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> ，将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">t[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 增加 1。</p>
</blockquote>
<h5 id="离散化">离散化</h5>
<blockquote>
<p>给定数组元素 <code>[1, 22, 333, 4444, 55555]</code>，如果我们只关注它们之间的大小关系，那么该数组其实和 <code>[1, 2, 3, 4, 5]</code>是等价的。</p>
</blockquote>
<h5 id="线段树">线段树</h5>
<h5 id="树状数组">树状数组</h5>
<h5 id="平衡二叉搜索树">平衡二叉搜索树</h5>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【遍历】【优化】子序列宽度之和]]></title>
        <id>https://scaramouche.me/bian-li-you-hua-zi-xu-lie-kuan-du-zhi-he/</id>
        <link href="https://scaramouche.me/bian-li-you-hua-zi-xu-lie-kuan-du-zhi-he/">
        </link>
        <updated>2022-11-18T13:34:03.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p><em>写在前面：</em><br>
<em>我相信很多初学者根本看不懂一些题解,其中有太多单个字符变量,每条代码也没有注释,也像囫囵吞枣一般直接将答案摆在开头,没有思考过程.</em><br>
<em>看这种题解对能力提升几乎为0:既没有思路,也写不出代码</em><br>
<em>看完我的题解如果你还不懂,请在评论区留下你的看法,我会一一回复到你懂为止</em></p>
<hr>
<h2 id="解题思路">解题思路</h2>
<p>根据题目给出的要求：</p>
<p>一个序列的 <code>宽度</code> 定义为该序列中最大元素和最小元素的差值。</p>
<p>返回 <code>nums</code> 的所有 <code>非空子序列</code>的宽度之和。</p>
<p>我们脑海里首先应该有这样的思考：</p>
<ul>
<li>思考一：
<ol>
<li>从一个数组 <code>nums</code>中，从左向右选出任意一些元素，他们不必相邻，选出的这些元素组成新的数组，就是一个子序列。</li>
<li>对于一个特定的子序列来说，每个元素有可能被选上，也有可能没有被选上。如果一共有 <code>n</code>个元素，每个元素都有选上和没选上2种状态，一个子序列就会有 <code>2**n</code>种状态。</li>
<li>换句话来说，<strong>一个数组有 <code>2**n</code>个不同的子序列</strong></li>
</ol>
</li>
<li>思考二：
<ol>
<li>对于一个序列的 <code>宽度</code>来说，它只和这个序列最大元素和最小元素的差值有关。</li>
<li>也就是说，序列的 <code>宽度</code>和绝大多数序列中的元素无关。</li>
<li>因此，如果我们得到了一个子序列，想要获得它的宽度，我们应该避免<strong>遍历这个子序列，得到它的最大值和最小值</strong>，因为绝大多数的比较都是无意义的。</li>
</ol>
</li>
</ul>
<p>根据上述的思考，特别是如果我们用逆向思维的方法思考<strong>思考二</strong>的第三点时，我们会发现，<strong>如果我们人为选出一个子序列的最小值和最大值，记作 <code>left</code>和 <code>right</code>，那么这个子序列的宽度就是 <code>right - left</code>。</strong></p>
<p>假如我们把答案记在 <code>res</code>中，那么我们可以得到这样的式子：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mo>=</mo><mo>(</mo><mo>−</mo><mi>l</mi><mi>e</mi><mi>f</mi><msub><mi>t</mi><mn>1</mn></msub><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><msub><mi>t</mi><mn>1</mn></msub><mo>)</mo><mo>+</mo><mo>(</mo><mo>−</mo><mi>l</mi><mi>e</mi><mi>f</mi><msub><mi>t</mi><mn>2</mn></msub><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><msub><mi>t</mi><mn>2</mn></msub><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mo>(</mo><mo>−</mo><mi>l</mi><mi>e</mi><mi>f</mi><msub><mi>t</mi><mi>m</mi></msub><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><msub><mi>t</mi><mi>m</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">res=(-left_{1}+right_{1})+ (-left_{2}+right_{2})+...+(-left_{m}+right_{m})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p><em>其中1,2,...,m分别代表第一个子序列，第二个子序列，...，第m个子序列。这里的m表示子序列的个数。<code>m=2**n</code></em></p>
<p>运用交换律，我们可以得到：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mo>=</mo><mo>−</mo><mo>(</mo><mi>l</mi><mi>e</mi><mi>f</mi><msub><mi>t</mi><mn>1</mn></msub><mo>+</mo><mi>l</mi><mi>e</mi><mi>f</mi><msub><mi>t</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>l</mi><mi>e</mi><mi>f</mi><msub><mi>t</mi><mi>n</mi></msub><mo>)</mo><mo>+</mo><mo>(</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><msub><mi>t</mi><mn>1</mn></msub><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><msub><mi>t</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><msub><mi>t</mi><mi>n</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">res=-(left_{1}+left_{2}+...+left_{n})+(right_{1}+right_{2}+...+right_{n})
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>也就是说，我们每选出一个子序列的最小值，就把它减到 <code>res</code>中，每选出一个子序列的最大值，就把它加到 <code>res</code>中。</p>
<p>这样，我们就几乎可以得到答案了。</p>
<h2 id="解法一-遍历">解法一: 遍历</h2>
<pre><code class="language-python">class Solution:
    def sumSubseqWidths(self, nums: List[int]) -&gt; int:
        nums.sort()
        &quot;&quot;&quot;     
        将nums排序之后

        对于某个特定的元素nums[i]

        根据思考一的第2点
        因为大于等于nums[i]的元素有n-i个
        我们可以很简单判断出
        以nums[i]为最小值的非空子序列有2**(n-i-1)个
        
        小于等于nums[i]的元素有i+1个
        以nums[i]为最小值的非空子序列有2**i个
        &quot;&quot;&quot;
        res=0
        n=len(nums)
      
        for i in range(n):
            # 请注意这里可能存在溢出
            res+=(2**i-2**(n-i-1))*nums[i]
            res%=(10**9+7)
        return res%(10**9+7)
</code></pre>
<p>虽然我们已经实现了程序，但是由于数据量太大，超时了，我们必须寻找优化方法。</p>
<h2 id="解法二-数组字典优化">解法二: 数组/字典优化</h2>
<p>我们发现在上述程序多次尝试调用 <code>2**x</code>，产生了不必要的重复计算。我们可以把 <code>2**x</code>的结果计算并保存下来。</p>
<pre><code class="language-py">class Solution:
    def sumSubseqWidths(self, nums: List[int]) -&gt; int:
        nums.sort()
        res=0
        n=len(nums)

        # 提前计算```2**x```的结果
        pow2=[1]*n
        for i in range(1,n):
            pow2[i]=pow2[i-1]*2%1000000007

        for i in range(n):
            res+=(pow2[i]-pow2[n-i-1])*nums[i]
            res%=1000000007
        return res
</code></pre>
<h2 id="解法三-函数优化">解法三: 函数优化</h2>
<blockquote>
<p>python内置的 <code>pow()</code>函数在处理 <code>mod</code>存在的情况比其他情况更高效。</p>
<p><em><a href="https://docs.python.org/zh-cn/3/library/functions.html?highlight=pow#pow">内置函数 — Python 3.11.0 文档</a></em></p>
</blockquote>
<p>我们可以使用 <code>pow(base, exp, mod)</code> 代替 <code>pow(base, exp) % mod</code>，如下：</p>
<pre><code class="language-py">class Solution:
    def sumSubseqWidths(self, nums: List[int]) -&gt; int:
        nums.sort()
        res=0
        n=len(nums)
      
        for i in range(n):
            res+=(pow(2,i,1000000007)-pow(2,n-i-1,1000000007))*nums[i]
            res%=1000000007
        return res
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【遍历】【二分查找】【多指针】匹配子序列的单词数]]></title>
        <id>https://scaramouche.me/20221117-pi-pei-zi-xu-lie-de-dan-ci-shu/</id>
        <link href="https://scaramouche.me/20221117-pi-pei-zi-xu-lie-de-dan-ci-shu/">
        </link>
        <updated>2022-11-16T16:13:25.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p><em>写在前面：</em><br>
<em>我相信很多初学者根本看不懂一些题解,其中有太多单个字符变量,每条代码也没有注释,也像囫囵吞枣一般直接将答案摆在开头,没有思考过程.</em><br>
<em>看这种题解对能力提升几乎为0:既没有思路,也写不出代码</em><br>
<em>看完我的题解如果你还不懂,请在评论区留下你的看法,我会一一回复到你懂为止</em></p>
<hr>
<h2 id="解题思路">解题思路</h2>
<p>对于这道题,通俗来讲就是求出字符串数组 <code>words</code>中是字符串 <code>s</code>的子序列的个数.</p>
<p>判断一个字符串是另一个字符串的子序列的一个基本方法就是<strong>双指针</strong>,代码如下:</p>
<p><strong>子序列判断</strong><br>
<em>以下代码表示判断 <code>word</code>是否是 <code>s</code>的子序列</em></p>
<pre><code class="language-py">    i=0     # index of char in s
    j=0     # index of char in word

    while i&lt;len(s) and j&lt;len(word):
        if s[i]==word[j]:
            i+=1;j+=1       # 匹配成功,两个指针后移
        else:
            i+=1        # 匹配失败,字符串s指针后移
        if j==len(word):        # 匹配了一整个word
            # do something 匹配成功了
</code></pre>
<h3 id="解法一-遍历">解法一: 遍历</h3>
<p>根据<strong>子序列判断</strong>,我们可以通过遍历 <code>words</code>中的每个字符串,判断是否是 <code>s</code>的子序列,如果是,则计数器加一.</p>
<pre><code class="language-py">class Solution:
    def numMatchingSubseq(self, s: str, words: List[str]) -&gt; int:
        # 解法一: 遍历
        ans=0
        for word in words:
            i=0 # index of char in s
            j=0 # index of char in word

            while i&lt;len(s) and j&lt;len(word):
                if s[i]==word[j]:
                    i+=1;j+=1 # 匹配成功,两个指针后移
                else:
                    i+=1 # 匹配失败,字符串s指针后移
            if j==len(word):# 匹配了一整个word
                ans+=1
        return ans
</code></pre>
<h3 id="解法二-二分查找">解法二: 二分查找</h3>
<p>在解法一中,我们观察到主要循环体内部:</p>
<pre><code class="language-py">            while i&lt;len(s) and j&lt;len(word):
                if s[i]==word[j]:
                    i+=1;j+=1 # 匹配成功,两个指针后移
                else:
                    i+=1 # 匹配失败,字符串s指针后移
</code></pre>
<p>语句 <code>if s[i]==word[j]</code>多次判断失败后,<code>i</code>指针会不断后移,直到 <code>i</code>指针指向 <code>s</code>中的某个字符与 <code>word[j]</code>相等,然后 <code>i</code>和 <code>j</code>指针都后移.</p>
<p>因此我们可以预先处理 <code>s</code>,将 <code>s</code>中的每个字符的位置存储起来,这样我们就可以通过二分查找的方法,快速找到 <code>s</code>中与 <code>word[j]</code>相等的字符.</p>
<p><strong>预处理</strong><br>
<em>以下代码表示预处理字符串s,将s中的每个字符的位置存储起来</em><br>
<em>例如: <code>s=&quot;aabca&quot;</code> 预处理后的结果为:</em><br>
<em><code>cnt={'a':[0,1,4],'b':[2],'c':[3]}</code></em></p>
<pre><code class="language-py">        cnt=defaultdict(list)
        for idx,ch in enumerate(s):
            cnt[ch].append(idx)
</code></pre>
<p>同时,因为预处理后的表示每个字符位置的数组是单调递增的,我们修改字符匹配的方法为二分查找法:</p>
<pre><code class="language-py">                if word[j] not in cnt:
                    break  # 匹配失败,word[j]字符在s中不存在
                next_i = bisect_left(cnt[word[j]], i)
                if next_i == len(cnt[word[j]]):
                    break  # 匹配失败,word[j]字符在未匹配的s中不存在
                i = cnt[word[j]][next_i]+1  # 匹配成功,更新i
</code></pre>
<p><strong>完整代码</strong></p>
<pre><code class="language-py">class Solution:
    def numMatchingSubseq(self, s: str, words: List[str]) -&gt; int:
        # 解法二: 二分查找
        ans = 0
        cnt = defaultdict(list)
        for idx, ch in enumerate(s):
            cnt[ch].append(idx)
        for word in words:
            i = 0  # index of char in s
            j = 0  # index of char in word

            while i &lt; len(s) and j &lt; len(word):
                if word[j] not in cnt:
                    break  # 匹配失败,word[j]字符在s中不存在
                next_i = bisect_left(cnt[word[j]], i)
                if next_i == len(cnt[word[j]]):
                    break  # 匹配失败,word[j]字符在未匹配的s中不存在
                i = cnt[word[j]][next_i]+1  # 匹配成功,更新i
                j += 1
            if j == len(word):  # 匹配了一整个word
                ans += 1
        return ans
</code></pre>
<h3 id="解法三-多指针">解法三: 多指针</h3>
<p>在解法二中,没有考虑到 <code>words</code>中的字符串可能存在前缀重复的情况,例如:<br>
<code>s=&quot;abcde&quot;</code>,<code>words=[&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;abcd&quot;,&quot;abcde&quot;]</code>.在这种情况下,尽管采用了二分查找,在判断 <code>words</code>中的每个字符串是否为 <code>s</code>的子序列时,多次匹配了相同的前缀.</p>
<p>我们可以把words按照首字母分类,例如:</p>
<pre><code class="language-py">words=[&quot;abc&quot;,&quot;abd&quot;,&quot;cbd&quot;]
</code></pre>
<p><em>分类后的结果为:</em></p>
<pre><code class="language-py">words={&quot;a&quot;:[&quot;abc&quot;,&quot;abd&quot;],&quot;c&quot;:[&quot;cbd&quot;]}
</code></pre>
<p>为了确定每个 <code>word</code>匹配是否完成,我们使用二元组[str,int]来标记字符串的匹配进度,例如:</p>
<pre><code class="language-py">words={&quot;a&quot;:[[&quot;abc&quot;,0],[&quot;abd&quot;,0]],&quot;c&quot;:[[&quot;cbd&quot;,0]]}
</code></pre>
<p><em>其中 <code>&quot;abc&quot;</code>的匹配进度为0,表示还未匹配任何字符.</em></p>
<p>这样,每次尝试匹配 <code>s</code>中的一个字符 <code>s[i]</code>时,我们可以找到所有以 <code>s[i]</code>开头的字符串,并更新它们的匹配进度.</p>
<p><strong>完整代码</strong></p>
<pre><code class="language-py">class Solution:
    def numMatchingSubseq(self, s: str, words: List[str]) -&gt; int:
        # 解法三:多指针
        ans = 0
        cnt = defaultdict(list)
        for idx, ch in enumerate(s):
            cnt[ch].append(idx)

        words_dict = defaultdict(list)
        for word in words:
            words_dict[word[0]].append([word, 0])  # 按照首字母把words分类到words_dict中
            # [word,0]表示word已经匹配了0个字符

        for ch in s:
            # 对于s中的一个字符,我们同时匹配words_dict[ch]中的所有字符串
            if words_dict[ch] == []:
                continue  # 如果words_dict[ch]为空,则跳过

            words_ch = words_dict[ch]
            del words_dict[ch]
            # words_ch表示正在匹配ch的字符串
            # 将words_dict[ch]中的字符串取出,并清空words_dict[ch]

            for word, idx in words_ch:
                if idx == len(word)-1:
                    ans += 1
                # 如果word已经匹配完了,则ans+1

                else:
                    idx += 1
                    words_dict[word[idx]].append([word, idx])
                    # 如果word还没有匹配完,则按照word的下一个字符加入words_dict中
                    # [word,idx]表示word已经匹配了idx个字符

        return ans
</code></pre>
]]></content>
    </entry>
</feed>